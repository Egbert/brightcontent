== Update from plugin to gem
Remove the plugin
  $ rm -rf vendor/plugins/brightcontent
Add the plugin in <code>vendor/gems</code>
  $ mkdir vendor/gems
  $ cd vendor/gems
  $ git clone git@github.com:brightin/brightcontent.git
  $ cd brightcontent
  $ git checkout -b rails-3.1-gem origin/rails-3.1-gem
Change these lines in your <code>Gemfile</code>
  # BrightContent

  gem 'acts_as_tree'
  gem 'acts_as_list'
  gem 'will_paginate', '~> 3.0.pre2'
  gem 'RedCloth'
  gem 'paperclip'
To this
  gem 'brightcontent', path: 'vendor/gems/brightcontent'
Run <code>bundle</code>

Change this line in <code>config/routes.rb</code>
  namespace :admin
To this
  namespace :brightcontent, path: 'admin' do
Install migrations and migrate
  $ rake brightcontent_engine:install:migrations
  $ rake db:migrate
Move admin controllers to brightcontent folder
  $ mv app/controllers/admin app/controllers/brightcontent
Replace all references to Admin class in your admin controllers (in app/controllers/brightcontent) with Brightcontent

.

   ___     _      _   _    ___         _           _   
  | _ )_ _(_)__ _| |_| |_ / __|___ _ _| |_ ___ _ _| |_ 
  | _ \ '_| / _` | ' \  _| (__/ _ \ ' \  _/ -_) ' \  _|
  |___/_| |_\__, |_||_\__|\___\___/_||_\__\___|_||_\__|
            |___/
  

Brightcontent, yet another rails CMS / admin panel

* For *developers*, to make a *custom CMS* for *non-technical users*
* No standard 'cms-modules', we hate those, making custom is easy enough
* Build in the rails way, use your normals models, only controllers and views are provided
* Only exception: Page model is provided with tree structure, draft, hidden and pretty urls like <tt>/services/cleaning/houses</tt>


== Defaults in views
Use the controller inheritance chain for overriding views (Rails 3.1 feature.)

=== Default list and form fields
The list (index) and forms (new/edit) tries to find partials with the field names. If it cannot be found, it uses generic fields (textfield for string etc.).

For example the field <tt>title</tt> will be rendered in the list by  <tt>_list_field_title.html.erb</tt> if it exists. If not, it will be rendered with a normal label and textbox (because its a string).

<tt>index.html.erb</tt> and <tt>_form.html.erb</tt> uses <tt>list_field</tt> and <tt>form_field</tt> functions in <tt>Brightcontent::ApplicationHelper</tt> 

== Default actions
Default crud actions are included. Generic variables <tt>@items</tt> (index) and <tt>@item</tt>(new, edit) are provided, but also with the specific name like <tt>@vacancies</tt> or <tt>@vacancy</tt>. Controllername should match modelname. You can overwrite the actions in the controller.

== Requirements
* Rails 3
* Uses ActiveRecord to find the type of column/field to render (in generic field)

= Setup

Run rails plugin to install the plugin in the vendor/plugin directory

  $ rails plugin install git@github.com:brightin/brightcontent.git
  
Add the requirements to your <tt>Gemfile</tt>

  gem 'brightcontent'
  
Run bundle install

  $ bundle install
  
Add admin routes for pages and other resources in <tt>config/routes.rb</tt>

  #brightcontent routing
  get 'admin' => redirect('/admin/pages')
  namespace :brightcontent, path: 'admin' do
    resources :pages do
      get :parent_specific_info, :on => :member      #for edit
      get :parent_specific_info, :on => :collection  #for new
    end
    #resources :vacancies  #for example
    resources :assets
    resources :users
    resource  :session, :only => [:new, :create, :destroy]
  end

Install migrations and migrate

  $ rake brightcontent:install:migrations
  $ rake db:migrate
  
Run rails runner to add a user to login

  $ rails runner 'User.create({:email_address => "admin@example.com", :password => "password"})'

Run forest run!

  $ rails s
  
and surf to http://0.0.0.0:3000/admin

== Precompiled assets and brightcontent/custom.css

If you want to use precompiled assets you need to add brightcontent/custom.css to the precompile list in <tt>production.rb</tt>:

  config.assets.precompile += %w( brightcontent/custom.css )

== Add a new model to brightcontent

Lets say, we want to add projects. Just create the <tt>Project</tt> model the rails way:
  $ rails g model Project name:string description:text
  $ rake db:migrate

Then, for brightcontent:
  $ rails g controller Brightcontent::Projects

Add the resource projects to <tt>config/routes.rb</tt> under the *brightcontent namespace*:

  resources :projects

Open <tt>app/controllers/brightcontent/projects_controller.rb</tt>. Inherit from <tt>Brightcontent::ApplicationController</tt>. You can specify fields to show in index(list) and edit (form) by setting @list_fields and @form_fields in a before_filter. 

  class Brightcontent::ProjectsController < Brightcontent::ApplicationController
    before_filter :set_fields
    
    private
    def set_fields
      @list_fields = ['id', 'name']
      @form_fields = Project.column_names - ['created_at', 'updated_at', 'description']
    end
  end
  
Gratz! Projects can now be controlled with Brightcontent.

== Public site
Add routing for your public site 

  # public routing
  # resources :vacancies, :path => "over/vacatures", :only => [:index, :show]   #for example
  root :to => "pages#show", :path => ''
  constraints PageUrls.new do
    get "*path" => "pages#show"
  end


Copyright (c) 2010-2011 Raymond Vellener / Brightin, released under the MIT license
